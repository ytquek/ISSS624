---
title: "Take Home Exercise 2"
date: "6 December 2023"
date-modified: "last-modified"
format: html
execute:
  echo: true
  warning: false
editor: visual
---

# Geospatial Data Science

## Project Summary

This project aims to show an example of how disparate data sources can be integrated, analysed, and modelled to support policy making decision.

In line with the nature of this course, it will be Geospatial data science and analysis (GDSA) centric by using openly available data such as Instituitional Property Information & Commercial listings with SG's public bus commuter flows to determine urban mobility patterns.

## Getting Started

-   sf - importing, integrating, processing and transforming geospatial data.

-   tidyverse & reshape2 - importing, integrating, wrangling and visualising data.

-   tmap - creating thematic maps.

-   performance & ggpubr - for doing spatial interaction modeling

```{r}
pacman::p_load(tmap, sf, sp, DT, stplanr,
               performance, reshape2,
               ggpubr, tidyverse, httr, dplyr, gridExtra)
```

## Preparing the Flow Data

### Importing the aspatial data

We will proceed to import the `Passenger Volume by Origin Destination Bus Stops` October data set downloaded from LTA DataMall.

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")
# removing duplicated line items
odbus <- distinct(odbus)
# double checking data is imported successfully
glimpse(odbus)
str(odbus)
```

::: {.callout-tip title="Tip with Title"}
Given `ORIGIN_PT_CODE` and `DESTINATION_PT_CODE` columns are character data type, we will need to convert them to factors
:::

```{r}
odbus$ORIGIN_PT_CODE <-
as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <-
as.factor(odbus$DESTINATION_PT_CODE)
```

#### Filtering data

Next, we will filter out trips that occurs on "Weekday" and "6-9am"

```{r}
wdmp <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
head(wdmp)
```

From wdmp, we see a total of 242208 observations. Next we will proceed to write wdmp into rds format before importing

```{r}
write_rds(wdmp, "data/rds/wdmp.rds") 
```

```{r}
wdmp <- read_rds("data/rds/wdmp.rds") 
```

### Geospatial Data

We will be using 2 sets of geospatial data for this exercise

-   BusStop Location from LTA Data Mall
-   2019 URA Master Plan

#### Importing Bus Stop Locations

First we will import the BusStop locations

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
glimpse(busstop)
```

Next we will use the following code chunk to check for duplicates

```{r}
duplicates <- busstop %>%
  st_set_geometry(NULL) %>%
  group_by(BUS_STOP_N,
           BUS_ROOF_N
  ) %>%
  # count each instance of busstop appearance by the column bus_stop_n and bus_roof_n
  summarise(
    count = n()
  ) %>%
  ungroup() %>%
  # retrieve bustops with more than single instance
  filter(count > 1)

glimpse(duplicates)
```

In total, 7 bus stops were found to have duplicates. It is unclear why this is the case, based on the student's external research using Google Maps, no distinct or unique properties of the bus stops were found. They were neither interchanges nor a single bus stop serving a loop.

We will proceed to use the *dplyr* package to remove the first instance of duplicates from the busstop tibble data.

```{r}
cleaned_busstop <- busstop %>% distinct(BUS_STOP_N,
           BUS_ROOF_N, .keep_all = TRUE)

class(cleaned_busstop)
sf::st_geometry(cleaned_busstop)

```

Double checking the cleaned_busstop data frame no longer have duplicates

```{r}
duplicates1 <- cleaned_busstop %>%
  st_set_geometry(NULL) %>%
  group_by(BUS_STOP_N,
           BUS_ROOF_N
  ) %>%
  # count each instance of busstop appearance by the column bus_stop_n and bus_roof_n
  summarise(
    count = n()
  ) %>%
  ungroup() %>%
  # retrieve bustops with more than single instance
  filter(count > 1)

glimpse(duplicates1)
```

#### Importing Whole of SG Map

Next we will import the MPSZ-2019 layer which is representative of Singapore

```{r}
mpsz <- read_rds("data/rds/mpsz.rds")
mpsz
```

## Setting up Hexagon Grid

The following code chunks create a hexagonal grid frame which spans a total of 750m from edge to edge for each hexagon to represent the traffic analysis zone (TAZ).

### Step 1. Drawing the Hexagon Grid

#### Drawing a hexagon grid over mpsz

```{r}
hexagon_grid = st_make_grid(mpsz, c(750, 750), what = "polygons", square = FALSE)
```

Next we will add a **grid_id** column to the hexagon grid before assigning the bus stops to it

```{r}
grid_sf = st_sf(hexagon_grid) %>%
  mutate(grid_id = 1:length(lengths(hexagon_grid)))
```

```{r}
busstop_grid <- st_intersection(grid_sf,cleaned_busstop) %>%
  select(BUS_STOP_N, grid_id) %>%
  st_drop_geometry()
```

### Step 2. Preparing origin to destination data

#### Preparing origin trip id

We will do a left join using our wdmp dataframe with busstop grid using **ORIGIN_PT_CODE**

```{r}
wdmp <- wdmp %>%
  left_join(busstop_grid, by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ori_grid = grid_id) %>%
  distinct()
```

#### Preparing destination trip id

We will do a left join using our wdmp dataframe with busstop grid using **DESTINATION_PT_CODE**

```{r}
wdmp <- wdmp %>%
  left_join(busstop_grid, by = c("DESTINATION_PT_CODE" = "BUS_STOP_N")) %>%
  rename(dest_grid = grid_id) %>%
  distinct()
```

To avoid cluttering our wdmp frame, we will remove the unused columns

```{r}
  wdmp <- na.omit(wdmp)
```

```{r}
  wdmp <- wdmp %>%
  ungroup() %>%
  select(-c(ORIGIN_PT_CODE, DESTINATION_PT_CODE)) 
```

To avoid any issues later on for plotting flow line with **grid_sf**, we will need to re-order the table to promote original grid id column first.

```{r}
wdmp <- wdmp %>%
  select(ori_grid, dest_grid, TRIPS)
```

## Visualising Spatial Interaction

The following steps are taken to visualise the traffic flows between TAZs.

### Removing intra-zonal flows

```{r}
wdmp_inter <- wdmp[wdmp$ori_grid != wdmp$dest_grid, ]
```

### Creating desire lines

Desire lines are straight lines which indicates the linear movement from origin to destination. We will use the od2line() function to create it.

```{r}
# Check for non-matching IDs
wdmp_inter$ori_grid[!wdmp_inter$ori_grid %in% grid_sf$grid_id]
# Check column types
str(wdmp_inter)
str(grid_sf)
#Check for NA fields
sum(is.na(wdmp_inter$ori_grid))
sum(is.na(wdmp_inter$dest_grid))
```

```{r}
flowLine <- od2line(flow = wdmp_inter, 
                    zones = grid_sf,
                    zone_code = "grid_id")
```

Using the quantile() function, we observe that between 75% to 100%, the data is obviously very skewed and in turn will affect visualisations later on.

```{r}
quantile(flowLine$TRIPS)
```

### Visualising the desire lines

Given that the flow data will be very messy if we were to plot everything in a go, we will opt to plot different desire lines based on the quantiles we observed.

When flow is \>= 5000

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(TRIPS >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

When flow is \>= 50000

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(TRIPS >= 50000) %>%
tm_shape() +
  tm_lines(lwd = "TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

When flow is \>= 90000

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(TRIPS >= 90000) %>%
tm_shape() +
  tm_lines(lwd = "TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

To see the top 20 most taken trips, we shall use the following code chunk

```{r}
# Join wdmp_inter with busstop_grid to get the bus_stop_n for ori_grid
wdmp_inter_with_stop_n <- wdmp_inter %>%
  left_join(busstop_grid, by = c("ori_grid" = "grid_id"))

# Join with bustop to get the loc_desc for the bus_stop_n
wdmp_inter_with_loc_desc <- wdmp_inter_with_stop_n %>%
  left_join(busstop, by = "BUS_STOP_N")

# Now select the top 10 trips with loc_desc
top_trips <- wdmp_inter_with_loc_desc %>%
  arrange(desc(TRIPS)) %>%
  slice_head(n = 20) 

head(top_trips)

```

### Summary

From the table, we can derive that the highest volume of trips are congregating around the causeway from Bus Stop number 46211 Bus Stop 46219. Both of which have identifical number of trips but however does not have a Bus Roof Number.

The next


## Understanding commuter patterns

## Propulsive and Attractiveness Variables
The factors listed above are computed at TAZ level for Spatial Interaction Modelling.

## Effect of Distance on Number of Trips

The analysis of distance on numbers of trips will require us to computer a distance matrix by using `grid_sf` and converting it from sf tibble data frame to an sp object

```{r}
grid_sp <- as(grid_sf, "Spatial")
grid_sp
```

Calculating the euclidean distance between the centroids of the hexagons

```{r}
euc_dist <- spDists(grid_sp, 
                longlat = FALSE)
head(euc_dist, n=c(10, 10))
```

### Labelling column and row headers of distance matrix

Create a list sorted according to the the distance matrix by hexagon grid id

```{r}
grid_id <- grid_sf$grid_id
# Attach `grid_id` to row and column for distance matrix matching
colnames(euc_dist) <- paste0(grid_id)
rownames(euc_dist) <- paste0(grid_id)
```

### Finding each Origin to Destination distance

```{r}
dist_pair <- melt(euc_dist) %>%
  rename(ori_grid = Var1,
         dest_grid = Var2,
         euc_dist = value)
head(dist_pair, 10)
```

### Find the mininum inter-zonal difference

We will refuse any distance which is 0 as that is not helpful in helping find the miniumum distance

```{r}
dist_pair %>%
  filter(euc_dist > 0) %>%
  summary()
```
### Summary

The smallest observed distance inter-zonal difference is 750m, which is exactly the distance between the centres of two adjacent hexagons. To resolve this, we can set the intra-zonal distance to 100 instead.

```{r}
dist_pair$euc_dist <- ifelse(dist_pair$euc_dist == 0,
                        100, dist_pair$euc_dist)
summary(dist_pair)
```

Converting `ori_grid` and `desti_grid` columns to factors data types

```{r}
dist_pair$ori_grid <-
as.factor(dist_pair$ori_grid)
dist_pair$dest_grid <-
as.factor(dist_pair$dest_grid)
```


## Finding how no. of trips relate to distance
### Compute the Total Passenger Trips 

```{r}
flow_data <- wdmp %>%
  group_by(ori_grid, dest_grid) %>% 
  summarize(TRIPS = sum(TRIPS)) 
```

### Separating intra-flow (within hexagon) from passenger volume df

```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ori_grid == flow_data$dest_grid, 
  0, flow_data$TRIPS)
flow_data$offset <- ifelse(
  flow_data$ori_grid == flow_data$dest_grid,
  0.000001, 1)
```

Converting `ori_grid` and `desti_grid` columns to factors data type

```{r}
flow_data$ori_grid <-
as.factor(flow_data$ori_grid)
flow_data$dest_grid <-
as.factor(flow_data$dest_grid)
```

### Combining passenger volume data with inter-zonal distance value

```{r}
flow_data <- flow_data %>%
  left_join (dist_pair,
             by = c("ori_grid" = "ori_grid",
                    "dest_grid" = "dest_grid"))
```

### Visualising Plot

```{r}
p1 <- flow_data %>%
  st_drop_geometry() %>%
  ggplot(
    aes(
      x = euc_dist, 
      y = TRIPS)) + 
  geom_point(
    size = 1,
    alpha = .6,
    color = "lightblue") +
  geom_smooth(method = lm) +
  ggtitle("Trips to distance")

logp1 <- flow_data %>%
  st_drop_geometry() %>%
  ggplot(
    aes(x = log(euc_dist), 
        y = log(TRIPS))) +
  geom_point(
    size = 1,
    alpha = .6,
    color = "lightgreen") +
  geom_smooth(method = lm) +
  ggtitle("Log of Trips to distance")
#Using gridExtra Package to show both graphs)
grid.arrange(p1, logp1, ncol = 2)

```

### Observation
A strong inverse linear trend is observed for trips when the distance is further for the log transformed data. Wheareas in the initial data, a trend is not immediately obvious although there is a slight inverse trendline observable as well.

## Propulsive Attributes

This refers to a strong factor that encourage a “push” for people to get away from their current location. 
Given the time period being analysed is Weekday Morning Peak, propulsive attributes are likely related to the following places of interest

-   Train Station Exits - Part of commute between residence & work/school
-   HDB - Residences/Homes

### Importing of Train Station Exit Locations

```{r}
mrt_exit <- st_read(dsn = "data/geospatial",
                   layer = "Train_Station_Exit_Layer") %>%
  st_transform(crs = 3414)
```

### Number of Train Station Exits per Location

```{r}
grid_attr <- grid_sf %>%
  mutate(mrt_exit_count = lengths(st_intersects(., mrt_exit)))
summary(grid_attr$mrt_exit)
```

### Importing of residential HDBs

```{r}
hdb <- read_csv("data/aspatial/hdb.csv")
hdb <- distinct(hdb)

```
Removing duplicates, select only residential properties and relevant columns
```{r}
hdb <- hdb %>%
  select(
    blk_no,
    street,
    postal,
    total_dwelling_units,
    lng,
    lat
  )
```

```{r}
hdb_sf <- st_as_sf(hdb,
                   coords = c("lng", "lat"),
                   crs = 4326) %>%
  st_transform(crs = 3414)

grid_attr$hdb <- lengths(st_intersects(grid_sf, hdb_sf))
```


## Attractive Attributes

Since the time period being analysed is Weekday Morning Peak, attractive attributes is likely to be:

-   Businesses
-   School
-   Food & Beverages
-   Retail Establishments


### Importing of Business Locations

```{r}
biz <- st_read(dsn = "Data/geospatial",
                   layer = "Business") %>%
  st_transform(crs = 3414)
```

### Number of Businesses per Location

```{r}

grid_attr$biz <- lengths(st_intersects(grid_sf, biz))

summary(grid_attr$biz)

message(paste("There are", sum(grid_attr$biz), " Businesses that occur in hexagons with bus stops", "with a maximum of", max(grid_attr$biz), "within grid_id", grid_attr$grid_id[which.max(grid_attr$biz)]))
```

The location with the most number of businesses is grid id 3942, with 126 businesses located within.

### Importing of Financial Services Locations

```{r}
fs <- st_read(dsn = "Data/geospatial",
                   layer = "FinServ") %>%
  st_transform(crs = 3414)
```

### Number of Financial Services per Location

```{r}
grid_attr$fs <- lengths(st_intersects(grid_sf, fs))

summary(grid_attr$fs)

message(paste("There are", sum(grid_attr$fs), " Financial Services that occur in hexagons with bus stops", "with a maximum of", max(grid_attr$fs), "within grid_id", grid_attr$grid_id[which.max(grid_attr$fs)]))
```

Note: The hexagaon with grid_id 2009 also boasts the highest count of train station exits!

### Importing of School Locations

```{r}
sch <- read_csv("data/aspatial/schools.csv")
```

Remove duplicates, select only relevant columns

```{r}
sch <- unique(sch)

sch <- sch %>%
  select(
    results.LATITUDE,
    results.LONGITUDE,
    postal_code, 
    school_name
  )

```

Rename columns for ease of reference

```{r}
sch <- sch %>%
  rename(
    latitude = results.LATITUDE,
    longitude = results.LONGITUDE
  )
```

### Converting an aspatial data into a simple features tibble data.frame

```{r}
sch_sf <- st_as_sf(sch,
                   coords = c("longitude", "latitude"),
                   crs = 4326) %>%
  st_transform(crs = 3414)
```

### Number of Schools per Location

```{r}
grid_attr$sch <- lengths(st_intersects(grid_sf, sch_sf))

summary(grid_attr$sch)

message(paste("There are", sum(grid_attr$sch), " Schools that occur in hexagons with bus stops", "with a maximum of", max(grid_attr$sch), "within grid_id", grid_attr$grid_id[which.max(grid_attr$sch)]))
```
### Importing of F&B

```{r}
fnb <- st_read(dsn = "Data/geospatial",
                   layer = "F&B") %>%
  st_transform(crs = 3414)
```
```{r}
grid_attr$fnb <- lengths(st_intersects(grid_sf, fnb))

summary(grid_attr$fnb)

message(paste("There are", sum(grid_attr$fnb), " FNB Services that occur in hexagons with bus stops", "with a maximum of", max(grid_attr$fnb), "within grid_id", grid_attr$grid_id[which.max(grid_attr$fnb)]))
```

## Check Propulsive and Attractive Attributes

Check `grid_attr`

```{r}
grid_attr
```

# Spatial Interaction Modelling

Select attributes relevant Propulsive Attributes and Attractive Attributes for Spatial Interaction Modelling

```{r}
attr <- grid_attr %>%
  st_drop_geometry() %>%
  mutate(
    grid_id = as.factor(grid_id)
  )
```

### Flow by Origin

Retain only propulsive attributes

```{r}
attr_flow <- left_join(
  dist_pair,
  attr,
  by = c("ori_grid" = "grid_id")) %>%
  rename(
    ori_biz = biz,
    ori_hdb = hdb,
    ori_sch = sch,
    ori_fnb = fnb,
    ori_fs = fs,
    ori_mrt_exit = mrt_exit_count
  ) %>%
  select(
    -c(ori_fs, ori_biz, ori_fnb))

```

### Flow by Destination

Retain only attractive attributes

```{r}
attr_flow <- left_join(
  attr_flow,
  attr,
  by = c("dest_grid" = "grid_id")) %>%
  rename(
    dest_biz = biz,
    dest_hdb = hdb,
    dest_sch = sch,
    dest_fnb = fnb,
    dest_fs = fs
  ) %>%
  select(
    -c(dest_sch, dest_hdb)
  )
```

### Add Trips

```{r}
attr_flow <- left_join(
  attr_flow,
  flow_data,
  by = c("ori_grid", "dest_grid")) %>%
  select(
    -c(FlowNoIntra, offset)
  )
```

### Remove NULL values

There are some routes from ori_grid to desti_grid that have 0 or NULL trips. These will be removed

```{r}
attr_flow <- attr_flow %>%
  filter(!is.na(TRIPS) & TRIPS != 0)
```

### Summary of attributes

```{r}
summary(attr_flow)
```

### Replacing 0 values



```{r}

update_cols <- c( "ori_hdb","ori_sch" ,"dest_fs", "dest_biz","dest_fnb")

# update all 0 values across columns
attr_flow <- attr_flow %>%
  mutate(across(all_of(update_cols), ~ ifelse(. == 0, 0.9, .)))

summary(attr_flow)

```

Save output indo rds

```{r}
write_rds(attr_flow, "data/rds/sim_data.rds")
```

### Finding the Linear Correlation between Trips and Propulsiveness

#### Train Station Exits

```{r}

p_res <- attr_flow %>%
      st_drop_geometry() %>%
      ggplot(
        aes(x = log(ori_mrt_exit),
            y = log(TRIPS))
      ) +
      geom_point(
        color = "grey",
        size = 1,
        alpha = .7
      ) +
      geom_smooth(method = lm) +
      theme(axis.text.x = element_blank()) +
      ggtitle("Trips ~ MRT Exits")

p_res
```

#### Residential Density

```{r}

p_hdb <- attr_flow %>%
      st_drop_geometry() %>%
      ggplot(
        aes(x = log(ori_hdb),
            y = log(TRIPS))
      ) +
      geom_point(
        color = "red",
        size = 1,
        alpha = .7
      ) +
      geom_smooth(method = lm) +
      theme(axis.text.x = element_blank()) +
      ggtitle("Trips ~ Residential Density")

p_hdb
```

### Finding the Linear Correlation between Trips and Attractiveness

#### F&B Establishments

```{r}
p_fnb <- attr_flow %>%
      st_drop_geometry() %>%
      ggplot(
        aes(x = log(dest_fnb),
            y = log(TRIPS))
      ) +
      geom_point(
        color = "orange",
        size = 1,
        alpha = .7
      ) +
      geom_smooth(method = lm) +
      theme(axis.text.x = element_blank()) +
      ggtitle("Trips ~ F&B")

p_fnb
```


#### Financial Services

```{r}
p_fs <- attr_flow %>%
      st_drop_geometry() %>%
      ggplot(
        aes(x = log(dest_fs),
            y = log(TRIPS))
      ) +
      geom_point(
        color = "green",
        size = 1,
        alpha = .7
      ) +
      geom_smooth(method = lm) +
      theme(axis.text.x = element_blank()) +
      ggtitle("Trips ~ Financial Services")

p_fs
```


#### Businesses

```{r}
p_biz <- attr_flow %>%
      st_drop_geometry() %>%
      ggplot(
        aes(x = log(dest_biz),
            y = log(TRIPS))
      ) +
      geom_point(
        color = "purple",
        size = 1,
        alpha = .7
      ) +
      geom_smooth(method = lm) +
      theme(axis.text.x = element_blank()) +
      ggtitle("Trips ~ Business")

p_biz
```


## Regression Modelling
### Multicollinearity checks
To avoid using two or more predictor variables in the model that are highly correlated with each other, we will do a multicollinearity check.

```{r}
cor_matrix <- cor(attr_flow[, c("ori_mrt_exit","ori_hdb", "ori_sch", "dest_biz", "dest_fs", "dest_fnb", "TRIPS")])

cor_matrix <- round(cor_matrix,2)
melted_corr_matrix <- melt(cor_matrix)
head(melted_corr_matrix)

```
```{r}
# plotting the correlation heatmap
ggplot(data = melted_corr_matrix, aes(x=Var1, y=Var2, 
                                   fill=value)) + 
geom_tile() +
geom_text(aes(Var2, Var1, label = value), 
          color = "white", size = 2.5) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

```

### Constrained SIM - Origin
```{r}
sum(attr_flow$euc_dist <= 0, na.rm = TRUE)

```


###Code chunk for original SIM
oriSIM <- glm(
    formula = TRIPS 
    ~ ori_grid + 
      log(dest_fs) + 
      log(dest_fnb) + 
      log(euc_dist) - 1,
    family = poisson(link = "log"),
    data = attr_flow,
           na.action = na.exclude)

summary(oriSIM)

Results

Unfortunately, i wasn't able to resolve the issue of the above code chunk to get the SIM data in time. 
